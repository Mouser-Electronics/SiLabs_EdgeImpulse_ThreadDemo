/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.08.2022 01:09:24

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0033241421915590763, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ 14,74,30,36,41,-39,40,49,68,-20,-3,42,-21,78,51,53,75,-7,-52,-47,-13,39,45,29,108,127,-8,-21,-31,-63,-73,-23,-68,-66,-16,-27,-102,-95,-64,-116, 78,65,87,-4,12,31,58,-6,42,-7,37,14,-39,-5,44,97,64,-41,-31,-41,-27,-3,73,-6,46,28,-6,-56,-22,-31,-62,-6,-8,-60,-66,-73,-73,-60,-83,-75, 49,32,46,41,53,9,53,35,17,-31,-30,1,-39,58,43,92,40,-54,-61,-11,108,119,89,-12,45,80,-25,-59,-57,-17,-85,-59,-38,-60,-75,-53,-22,-28,-27,-83, 
  /* [1][0][][] */ -7,-3,-21,-4,32,34,10,-37,-13,51,31,-10,73,34,-11,14,5,42,60,42,0,54,8,9,35,18,8,33,12,75,21,9,71,39,39,23,69,46,32,16, -36,-7,-17,27,-12,56,36,-23,22,64,25,58,-4,-29,-30,-41,-3,65,30,32,48,54,84,66,26,-8,-18,-14,6,41,1,50,76,77,51,99,41,73,38,32, -64,-29,-19,47,29,-11,-5,-38,19,43,7,18,77,17,-46,13,7,-3,20,15,19,5,26,64,14,9,49,20,88,60,24,62,127,116,94,100,116,95,57,20, 
  /* [2][0][][] */ -12,-11,-8,33,-17,-8,-30,17,-18,-3,10,59,64,21,4,-55,-12,-24,-3,-25,-7,-11,-27,12,-17,-37,11,-28,-9,42,10,-2,14,-25,-25,-13,-2,-35,-40,-30, -44,-31,-25,4,-21,73,-14,-28,-17,-4,29,19,67,9,18,-53,2,104,-18,19,38,-17,-71,-11,-20,-22,-34,20,27,54,67,12,54,39,4,-14,10,-15,-33,-42, -58,-49,-2,-20,-1,-29,0,-12,-30,-16,16,29,60,29,3,-32,-43,127,-16,-11,52,-28,-44,0,-26,-16,10,8,6,0,38,4,25,9,-2,15,2,-29,-1,-44, 
  /* [3][0][][] */ -18,72,22,83,82,13,47,81,18,21,17,82,79,82,57,-21,25,21,-18,15,1,11,31,-23,86,29,31,53,32,19,-9,35,24,-12,-4,13,-22,58,15,1, 25,65,69,16,83,95,78,56,22,57,-19,82,71,5,3,65,14,63,18,-15,-18,17,55,-23,17,50,37,58,46,7,27,-29,-25,34,6,3,-34,-32,49,-19, 38,31,106,27,77,45,78,60,41,5,30,116,127,60,52,-32,57,54,40,71,5,-23,-31,-13,-16,29,0,70,-2,-16,-42,-34,-27,28,23,37,-40,-2,42,52, 
  /* [4][0][][] */ 13,-16,-59,-17,2,-93,-33,-35,-86,-52,-46,-27,-53,-14,-23,-67,-20,-74,-42,-66,-49,-59,-39,-54,22,31,-8,-8,80,-21,-12,-4,32,-2,15,36,101,110,57,127, -16,-12,-45,-43,-17,-16,-77,-65,-40,-53,-42,-101,-94,-52,-80,-46,4,-74,-64,-18,-57,-94,-47,29,44,74,-18,59,70,54,67,71,23,40,75,62,63,31,106,90, -31,-32,17,-25,-15,-58,-66,-48,-9,-36,-24,-64,5,-22,-47,-61,-66,-48,-25,-24,-30,-50,-5,-55,42,-18,3,27,42,-48,-47,-12,-9,4,5,39,31,71,96,122, 
  /* [5][0][][] */ 33,-10,-5,-17,-23,-33,-43,-47,-11,-79,-38,-23,22,-2,-16,40,31,-10,-59,-15,-52,-27,2,-30,24,-6,55,-24,-34,-25,-6,1,-68,-9,-26,39,0,-25,0,-3, -22,-52,-64,14,-36,7,-15,-6,-72,-5,-68,-89,-57,-29,-9,10,66,-48,5,-89,-85,-90,-63,-62,27,36,40,37,-33,29,15,60,5,49,37,44,-45,104,100,117, -9,-4,-26,-77,-31,-52,5,14,12,-92,-52,10,14,40,8,86,60,-57,-15,-39,-52,-59,-15,-39,54,77,47,18,28,-3,-45,-26,-55,-41,36,-38,-23,27,70,127, 
  /* [6][0][][] */ 36,19,-8,-17,26,15,105,65,-40,41,-46,61,39,-2,28,39,59,-31,-28,-82,-21,32,32,83,-7,-66,-79,-14,71,-102,-127,-88,-44,17,-46,50,14,-68,-40,68, 67,6,27,76,22,48,16,-21,16,-14,11,50,21,3,-58,96,-15,-8,-83,51,72,100,86,29,-75,-43,-54,-40,34,-68,-45,-82,-99,-110,-54,15,-7,80,11,62, 25,106,84,30,38,4,96,63,63,50,21,72,34,36,16,9,-33,-55,-23,41,90,40,-12,-7,-65,-24,85,18,63,-58,-54,-66,-31,6,13,22,18,-23,67,77, 
  /* [7][0][][] */ -1,-45,-23,-13,-18,-77,-30,14,-40,-26,-106,-42,1,43,-11,17,-45,-38,-3,-101,61,5,63,64,107,66,-18,-19,69,-10,-96,-21,6,-98,-71,-60,29,-42,61,72, 14,24,16,9,-84,-25,30,28,30,-42,-53,-28,-54,-23,51,-24,22,-38,-14,-86,63,61,107,-16,115,87,76,31,61,13,-13,11,3,-6,-100,-77,-94,53,81,28, -33,-21,-17,-30,24,-1,44,50,-63,-29,-98,-31,-18,51,-4,77,32,-16,-49,-21,76,127,-3,-1,-23,60,72,38,-65,-40,-96,-45,-67,-57,-31,4,-88,-65,19,94, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.004947747103869915, 0.0045331846922636032, 0.00757261598482728, 0.0044668749906122684, 0.0049927327781915665, 0.0041803652420639992, 0.0029004910029470921, 0.0032800121698528528, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -287, -17091, 430, -1130, 221, 51, -1522, 639, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.6447014786535874e-05, 1.5068950233398937e-05, 2.5172452296828851e-05, 1.4848527825961355e-05, 1.6596553905401379e-05, 1.3896128621126991e-05, 9.6416442829649895e-06, 1.0903227121161763e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 44,-45,-78,41,-6,-9,67,-23, 127,-45,-75,-4,-29,-25,32,-3, 126,-49,-24,32,13,96,58,25, 
  /* [1][0][][] */ -100,69,12,-55,88,8,85,37, -104,-49,57,30,-45,34,36,-11, 22,70,127,93,2,-45,-32,5, 
  /* [2][0][][] */ -32,30,-44,-49,107,126,-29,-63, 84,1,-22,49,127,8,-22,69, 50,-49,-39,-58,37,19,35,27, 
  /* [3][0][][] */ -61,30,127,50,-22,62,-8,108, -26,-6,98,109,11,47,84,19, 6,-53,121,50,-52,48,87,0, 
  /* [4][0][][] */ 67,-1,-20,-15,114,32,-11,46, 8,-25,-48,-11,9,-8,7,64, 127,-55,-8,27,-21,60,-14,56, 
  /* [5][0][][] */ 119,-39,-79,-8,122,113,44,56, 13,-54,-68,-6,118,127,-33,21, 48,-31,-15,-20,56,28,-24,52, 
  /* [6][0][][] */ -22,28,127,87,-26,0,-25,54, -42,8,118,-44,-5,38,1,-65, -66,63,59,-20,127,-12,7,-36, 
  /* [7][0][][] */ 54,-43,-44,2,6,127,67,62, 106,-71,-110,22,87,95,69,2, 36,-56,-93,14,99,99,9,107, 
  /* [8][0][][] */ 21,-50,-11,-32,11,54,9,91, 74,-32,-127,76,107,76,52,102, 109,-51,-52,-47,4,6,89,73, 
  /* [9][0][][] */ -70,-26,-8,-16,127,58,-55,-5, -70,121,84,-37,123,66,71,-13, -79,18,83,22,107,18,30,34, 
  /* [10][0][][] */ 84,-17,-12,-12,40,22,-20,34, 127,-15,-52,1,99,72,44,7, 83,-22,-58,-32,17,16,53,7, 
  /* [11][0][][] */ -57,-10,90,54,-6,-38,45,5, -69,66,127,7,-21,-1,30,65, -34,24,46,70,-2,-48,70,26, 
  /* [12][0][][] */ 81,1,-56,-26,127,105,32,-29, 30,-18,16,-7,116,-2,25,57, 52,-18,-34,-40,18,47,-3,34, 
  /* [13][0][][] */ -62,32,34,91,-48,-80,40,-54, -127,30,109,11,96,32,-24,9, -121,-56,18,110,28,38,113,13, 
  /* [14][0][][] */ -62,52,123,72,-94,17,-4,-20, -67,77,26,47,61,-45,33,-15, -111,124,127,4,63,17,44,22, 
  /* [15][0][][] */ -24,122,38,108,-28,-81,-15,21, -88,80,70,-37,127,68,125,26, -22,-11,105,-42,4,49,-44,35, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0050874138250946999, 0.0036349867004901171, 0.005249295849353075, 0.0041924300603568554, 0.0052602631039917469, 0.0050614387728273869, 0.0040091532282531261, 0.0045422166585922241, 0.0040418603457510471, 0.0042108935303986073, 0.0060301385819911957, 0.0059062591753900051, 0.0054246876388788223, 0.0034287285525351763, 0.0042219427414238453, 0.0030645104125142097, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -38, -37, -26, -718, -82, -56, -97, -57, -181, 332, -30, -120, 50, -219, -95, -504, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0002189975930377841, 0.00015647505642846227, 0.00022596612689085305, 0.00018047128105536103, 0.00022643823467660695, 0.00021787945297546685, 0.0001725817855913192, 0.00019552852609194815, 0.00017398972704540938, 0.00018126607756130397, 0.0002595790138002485, 0.0002542463771533221, 0.00023351619893219322, 0.00014759627811145037, 0.00018174172146245837, 0.00013191779726184905, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  -36, -49, 7, -68, -39, 22, 65, 29, -22, 58, 55, -12, 3, 41, 44, 8, -60, 48, 59, -35, 22, 30, 10, -39, -24, 7, 11, -2, 59, 28, 27, 34, -36, 42, -36, -54, -76, -51, 92, -43, -67, 47, -54, 15, -36, -1, 73, 7, -48, -3, 95, -9, 17, 23, 13, -20, 6, 49, 17, 26, 42, 53, 50, 75, -44, 17, 7, -22, 12, -17, 10, -18, -30, 10, -50, 30, 15, 31, 21, 1, -28, 34, 18, 14, -7, -21, 47, -23, 9, 35, -32, 19, -15, 57, 36, 72, 8, 46, 35, 38, 0, -31, 29, -34, 11, 23, -18, 38, -14, 47, 1, 8, 23, 13, -38, 50, -38, -51, -11, -57, -33, -30, -29, 36, -34, 31, 34, 19, 11, -3, -26, 37, -33, -111, 8, -76, -3, -6, -46, 30, -50, 50, 16, -8, -31, -4, -4, 38, -26, -59, 15, -41, 22, 11, -18, 46, -7, 53, 62, 8, -20, 16, 12, 26, -6, -21, -2, -23, -11, -33, -45, 20, -43, 49, 52, 8, -1, 16, -44, 9, -24, -39, 33, -90, -35, -35, -46, 20, -74, -8, 25, 12, -13, -7, -37, -5, -6, -72, 19, -47, -7, -36, -86, 11, -50, 0, -21, 10, 38, -10, 11, 21, -26, -5, 19, 21, -34, 54, -26, 13, -2, 28, 36, 43, -30, -9, 23, 27, -4, -16, 13, -44, -1, 34, -51, -3, -13, -50, 17, 52, -63, -34, -36, -26, -46, -19, -4, -68, -76, -50, -73, -50, -43, -9, 13, 25, -33, -31, -11, -27, -77, -15, 41, -71, -70, 40, -91, -39, -35, -38, 65, -8, -23, 44, 1, 3, -53, -5, 37, -19, -34, 75, 13, 20, 13, 11, 55, 58, -40, 23, 40, 47, -33, -13, -7, -32, -10, 25, 18, 15, 20, -32, -14, 50, -58, 28, -62, -11, -53, -78, 11, -50, -47, -30, -80, 21, -35, 30, -15, 15, -54, 42, -52, 7, -15, -95, 4, -49, -33, -7, -92, 5, -57, 44, 1, -3, -42, 17, -32, 55, -20, -30, 40, -22, -12, -24, -11, 56, -59, 7, 39, 27, -6, 35, 12, 5, -30, -66, 1, -55, -10, 41, -101, 34, -66, 0, 55, 38, -14, -18, -19, 17, -18, -117, 32, -124, -4, -54, -111, 9, -13, -13, 43, 20, -22, 9, -44, 9, 15, -82, 14, -76, 23, -24, -87, 17, -5, 15, -7, 26, 
  44, -3, -11, 67, 63, -26, -40, -13, 28, -49, -53, 20, -5, -39, -54, -37, 80, -66, -27, 39, -35, -22, -26, 31, -15, -22, 38, -16, -54, -15, -18, -1, 33, -36, 41, 31, 78, 21, -73, 33, 37, -26, 66, 21, 19, -26, -53, 6, 68, 5, -78, 33, -15, -24, -22, 46, 11, -85, 13, -29, -41, -93, -47, -59, 28, -2, -17, -31, -17, -7, 12, 38, 27, -52, 29, -28, -29, -18, -44, -12, 5, -24, 13, -36, -10, 4, -13, 8, -34, -71, 28, -57, 4, -46, -32, -70, 9, -14, 9, -33, -2, 29, 9, 32, 15, -15, 16, -33, -20, -60, 7, -8, -11, -31, 43, -54, 19, 9, 12, 72, 56, 32, 38, -12, 24, -46, -21, -22, -15, 2, 34, -8, 48, 97, -11, 93, 45, 5, 76, -14, 48, -20, -15, 7, 36, -22, 25, 1, 50, 48, -17, 26, 9, 1, 47, -37, 23, -64, -43, -48, 19, 5, 21, -8, 21, 13, 0, 54, -35, -1, 75, -36, 0, -32, -8, -32, 26, 9, 46, 13, -18, 26, -4, 93, -13, 73, 49, -2, 68, 18, -41, -12, 13, 8, 14, -23, 44, 57, -13, 37, 44, 17, 94, 7, 63, 2, 24, 13, 0, -10, 16, -29, 15, -21, -15, -15, -11, -40, 13, -29, 17, -36, -55, -43, 46, 6, -2, -2, 51, 50, -4, 25, 6, 0, 46, -13, 20, 8, 15, -25, 38, 42, 51, 57, 22, 22, -29, 66, 75, 86, 86, 21, 46, 14, -3, -38, 77, 38, 50, 44, 64, 65, -15, 59, 51, -36, 46, 25, 41, 18, -34, 10, 30, -44, -44, -9, 10, 0, -10, 21, -1, -83, 2, -34, -22, -31, -52, -63, 49, -25, -28, -41, -3, -5, -15, 44, -18, -15, 34, -5, -15, -5, 10, -9, 16, -15, 57, -22, 38, 65, 34, 35, 34, 6, 102, -26, 80, -26, -38, -6, 39, 8, 43, -20, 31, 96, -38, 75, 9, -9, 83, -28, 56, -9, -37, -4, 39, -42, 20, -25, 1, 50, -47, 47, -5, -6, 42, -2, 59, -46, -61, -35, 42, 8, 5, -36, 15, 65, -15, 54, -4, -38, 127, -12, 37, 14, -31, -40, 51, -33, 14, -31, 14, 109, -23, 124, 13, 30, 106, -3, 16, -23, 2, -7, 26, -5, 66, -5, -3, 122, -15, 69, 22, 14, 96, 13, 49, -4, 13, 9, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0044326195493340492, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { 86, -86, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00029087063740007579, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0033241421915590763, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.043046940118074417, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.043046940118074417, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.043046940118074417, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.043046940118074417, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.065620481967926025, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.065620481967926025, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.065620481967926025, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.065620481967926025, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.19308190047740936, } };
const TfArray<1, int> quant21_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
